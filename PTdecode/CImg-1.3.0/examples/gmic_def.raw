#
#  File        : gmic_def.raw
#                ( G'MIC default macro file )
#
#  Description : Define additional commands for G'MIC (GREYC's Magic Image Converter).
#                ( http://gmic.sourceforge.net )
#                This file is also a part of the CImg Library project.
#                ( http://cimg.sourceforge.net )
#
#  Usage       : gmic [-m gmic_def.raw] (...)
#
#  Note        : This file is here for illustration purposes, since commands defined in
#                the default macro file are already present by default in G'MIC.
#                Then, explicit inclusion of this file (using the '-m' option) if
#                useless.
#
#  Copyright   : David Tschumperle
#                ( http://www.greyc.ensicaen.fr/~dtschump/ )
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

#----------------------------------------
#
# Get and display image characteristics
#
#----------------------------------------

# Compute image gradient norm.
#-----------------------------
#@gmic gradient_norm : (no args) : Compute gradient norm of the last image.
gradient_norm :
  -e "Compute gradient norm of the last image."
  -v- -t float -gradient[-1] xyz -a[-3--1] v -norm[-1] -sqrt[-1] -v+

# Compute image gradient orientation in 'N'-D.
#---------------------------------------------
#@gmic gradient_orientation : N=3 : Compute N-D gradient orientation of the last image.
_gradient_orientation3 :
   -gradient[-1] xyz --sqr[-3--1] -+[-3--1] -+[-1] 1e-8 -sqrt[-1] -/[-4,-3] [-1] -/[-2,-1]
_gradient_orientation2 :
   -gradient[-1] xy --sqr[-2,-1] -+[-2,-1] -+[-1] 1e-8 -sqrt[-1] -/[-3] [-1] -/[-2,-1]
_gradient_orientation1 :
   -gradient[-1] x --abs[-1] -+[-1] 1e-8 -/[-2,-1]
gradient_orientation : -int ${1=3}
  -v- -if $1 (4) --[-1] $1 -if @-1 -rm[-1]
  -v+ -e "Compute $1-D gradient orientation of the last image." -v-
  -t float -_gradient_orientation$1 -else -v+ -e "Invalid argument '$1', should be '{1,2,3}'." -q
  -endif -else -v+ -e "Invalid argument '$1', should be '{1,2,3}'." -q
  -endif -v+

# Compute image laplacian.
#-------------------------
#@gmic laplacian : (no args) : Compute Laplacian of the last image.
laplacian :
  -e "Compute image laplacian of the last image."
  -v- -t float -hessian[-1] xxyyzz -+[-3--1] -v+

# Compute oriented second derivative in the gradient direction.
#--------------------------------------------------------------
#@gmic gradient_2derivative : (no args) : Compute gradient-directed 2nd derivative of the last image.
gradient_2derivative :
  -e "Compute gradient-directed 2nd derivative of the last image."
  -v- -t float --gradient[-1] xyz -hessian[-4] xxxyxzyyyzzz
  --sqr[-3] -*[-10,-1] --sqr[-2] -*[-7,-1] --sqr[-1] -*[-5,-1]
  -*[-8,-7,-5] 2 -*[-8] [-3] -*[-8] [-2] -*[-7] [-3] -*[-7] [-1] -*[-5] [-2] -*[-5] [-1]
  -+[-9--4] -sqr[-3--1] -+[-3--1] -+[-1] 1e-8 -/[-2,-1] -v+

# Difference of Gaussians.
#-------------------------
#@gmic dog : 'sigma1=2','sigma2=3' : Compute edges in the last image by using difference of gaussian-filtered images.
dog : -float ${1=2},${2=3}
  -e "Compute edges in the last image by difference of gaussian-filtered images, with standard deviations $1 and $2."
  -v- -t float --blur[-1] $1 -blur[-2] $2 --[-1,-2] -norm[-1] -v+

# Estimate isophote curvatures.
#------------------------------
#@gmic curvature : (no args) : Estimate isophote curvatures of the last image.
curvature :
  -e "Estimate isophote curvatures of the last image."
  -v- [-1]x2 -laplacian -mv[-1] -2 -gradient_2derivative --[-2,-1]
  -mv[-1] -2 -gradient_norm -+[-1] 1e-8 -/[-2,-1] -v+

# Complex<->polar transform (the two last images give the real and imaginary parts).
#-----------------------------------------------------------------------------------
#@gmic complex2polar : (no args) : Compute complex->polar transform (two last images are real and imaginary parts).
complex2polar :
  -e "Compute complex to polar transform."
  -v- -t float -+[-2] 1e-8 --/[-1] [-2] -atan[-1] -sqr[-3,-2] -+[-3,-2] -sqrt[-2] -v+

#@gmic polar2complex : (no args) : Compute polar->complex transform (two last images are real and imaginary parts).
polar2complex :
  -e "Compute polar to complex transform."
  -v- -t float [-1] -cos[-2] -sin[-1] -*[-1] [-3] -*[-3,-2] --[-2] 1e-8 -v+

# Fourier transform viewer with centered log-module and centered argument.
#-------------------------------------------------------------------------
#@gmic display_fft : (no args) : Display Fourier transform of the last image with centered log-module and argument (eq. to '-dfft').
display_fft :
  -e "Display Fourier transform of the last image."
  -v- -t float -fft[-1] -complex2polar -translate[-2,-1] 50%,50%,50%,0,2 -log[-2] -n 0,255 -v+
dfft :
  -display_fft

# Render a RGBA image over a user-defined background.
#----------------------------------------------------
#@gmic compose_rgba : (no args) : Render a RGBA image (last image) over a RGB background (penultimate image).
compose_rgba :
  -e "Compose RGBA image with RGB background."
  -v- --[-1] 255 -r[-1] 100%x100%x1x4x0 -+[-1] 255 -r[-1] [-2],[-2],[-2],4,0
  -s[-1] v -a[-4--2] v -/[-1] 255 [-1] -negative -r[-4--1] 100%x100%x1x3
  -*[-4,-1] -*[-2,-1] -+[-2,-1] -v+

# Render a RGBA image over a synthetic checkerboard background.
#--------------------------------------------------------------
#@gmic display_rgba : (no args) : Render a RGBA image (last image) over a synthetic background (eq. to '-drgba').
display_rgba :
  -e "Render RGBA image over synthetic background."
  -v- 2x2 -f[-1] 160,128,128,160 -mv[-1] -2 -r[-2] 16x16 -r[-2] [-1]x[-1]x1x3,0,2 -compose_rgba -v+
drgba :
  -display_rgba

#-----------------------------
#
# Geometric filters
#
#-----------------------------

# Image array.
#-------------
#@gmic array : 'M=3,N=M' : Create a MxN array from the last image.
array : -int ${1=3},${2=$1}
  -e "Create a $1x$2 array from last image."
  -v- [-1]x$1 -rm[-1] -a[-$1--1] x [-1]x$2 -rm[-1] -a[-$2--1] y -v+

# Tiled array.
#-------------
#@gmic array_tile : 'M=3,N=M' : Create a MxN fade-tiled array from the last image.
array_tile : -int ${1=3},${2=$1}
  -e "Create a $1x$2 fade-tiled array from the last image."
  -v- --translate[-1] 50%x50%x1x1,2 -mv[-1] -2 -fade_diamond 80,90 -array $1,$2 -v+

# Mirror-tiled image.
#--------------------
#@gmic mirror_tile : 'N=2' : Create a NxN mirror-tiled version of the last image.
_mirror_tile :
  [-1]x3 -mirror[-3,-1] x -mirror[-2,-1] y -a[-4,-3] x -a[-2,-1] x -a[-2,-1] y
mirror_tile : -int ${1=2}
  -e "Create a $1x mirror-tiled version of the last image."
  -v- -i[0] ($1) --[0] 1 -repeat @0 -_mirror_tile -done -rm[0] -v+

# Taquin puzzles.
#----------------
#@gmic taquin : 'M=4,N=M' : Create a MxN taquin puzzle from the last image.
_taquin :
  -i @0 -rand[-1] @0,1 -*[-1] -1 -round[-1] 1 --[-1] 1 -reverse[@-1] -rm[-1]
taquin : -int ${1=4},${2=$1}
 -e "Create $1x$2 taquin puzzle from the last image."
 -v- -i[0] ($1) -*[0] $2 -split_tile $1,$2 -repeat 10 -_taquin -done -rm[0] -append_tile $1,$2 -v+

# Image grids.
#-------------
#@gmic grid : 'M=10,N=M' : Create a MxN grid version of the last image.
grid : -int ${1=10},${2=$1}
  -e "Create $1x$2 grid version of the last image."
  -v- -i[-2] $1x$2 -f[-2] 1 --translate[-2] -1,-1 --[-3,-1] -*[-2] -1
  -+[-2] 1 --dimensions[-1] -s[-1] y -/[-4] $1 -/[-3] $2 (2) -a[-5--1] y
  -round[-1] 1,-1 -r[-2] @-1 -s[-1] y -rm[-1] -*[-4] $1 -*[-3] $2 -a[-4--1] y -r[-2] @-1
  (0;2) -a[-2,-1] y -r[-3] @-1 -rm[-1] -r[-1] [-2] -*[-2,-1] -v+

# Insert colored frames around image.
#------------------------------------
#@gmic frame : 'W=20,H=W,R=255,G=255,B=255' : Insert a WxH RGB-colored frame around the last image.
_framex :
  -i 1,1,1,3 -f[-1] $2,$3,$4 -r[-1] $1,[-2],[-2],[-2],1 -i[-3] [-1] -a[-3--1] x
_framey :
  -i 1,1,1,3 -f[-1] $2,$3,$4 -r[-1] [-2],$1,[-2],[-2],1 -i[-3] [-1] -a[-3--1] y
frame : -int ${1=20},${2=$1} -float ${3=255},${4=$3},${5=$4}
  -e "Insert a $1x$2 frame with RGB color ($3,$4,$5) in the last image."
  -v- -_framex $1,$3,$4,$5 -_framey $2,$3,$4,$5 -v+

# Draw a colored fuzzy frame around image.
#-----------------------------------------
#@gmic frame_fuzzy : 'W=20,H=W,fuzzyness=3,smoothness=3,R=255,G=255,B=255' : Draw a WxH RGB-colored fuzzy frame around the last image.
frame_fuzzy : -int ${1=20},${2=$1} -float ${3=5},${4=1},${5=255},${6=$5},${7=$6}
  -e "Draw a $1x$2 fuzzy frame with RGB color ($5,$6,$7), fuzzyness $3 and smoothness $4 in the last image."
  -v- -i[0] ($1;$2) -*[0] 2 1x1x1x3 -f[-1] $5,$6,$7 -r[-1] [-2] 100%x100%
  -polygon[-1] 4,0,0,100%,0,100%,@{0,1},0,@{0,1},1,1
  -polygon[-1] 4,0,0,@{0,0},0,@{0,0},100%,0,100%,1,1
  -rm[0] -translate[-1] $1,$2,0,0,2 -spread $3 -blur[-1] $4 -_fade 50,80 -v+

# Polaroid effect.
#-----------------
#@gmic polaroid : 'W1=30,W2=120,W3=40' : Create polaroid from last image, with specified border sizes.
polaroid : -int ${1=30},${2=120},${3=40}
  -e "Create polaroid effect from the last image with borders $1, $2 and $3."
  -v- -frame $1,$1,255,255,255 [-1],$2,1,3 -f[-1] 255 -a[-2,-1] y
  --dimensions[-1] -+[-1] $3 -+[-1] $3 --f[-2] -1 -r[-1] @{-2,0-1},1,3,0,0,1 -rm[-2]
  -blur[-1] 5 -r[-2] [-1],0,0,1 -n[-1] 0,180 -or[-2,-1] -v+

# Drop shadow.
#-------------
#@gmic drop_shadow : '(no args) : Add a drop shadow behind the last image.
drop_shadow :
  -e "Add a drop shadow behind the last image."
  -v- --f[-1] 0 --[-1] 255 -r[-2,-1] 120%x120%x1x100%,0,0,1 -+[-1] 255 --blur[-1] 10 -translate[-3,-2] 10,10,0,0,1
  -*[-2,-1] -n[-1] 0,255 -+[-2,-1] -v+

# Split into tiles.
#------------------
#@gmic split_tile : 'M=8,N=M' : Split last image into MxN regular tiles.
split_tile : -int ${1=8},${2=$1}
  -e "Decompose last image into $1x$2 regular tiles."
  -v- -i[0] ($1) -*[0] $2 -s[-1] x,$1 -s[-$1--1] y,$2 -r[-@0--1] [-@0],0 -rm[0] -v+

# Append tiles.
#--------------
#@gmic append_tile : 'M=8,N=M' : Append last MxN regular tiles together.
append_tile : -int ${1=8},${2=$1}
  -e "Append last $1x$2 regular tiles together."
  -v- -i[0] ($1) -*[0] $2 -a[-@0--1] y -s[-1] y,$1 -a[-$1--1] x -rm[0] -v+

# Rotate tiles.
#---------------
#@gmic rotate_tile : 'angle=5,M=8,N=M' : Apply MxN tiled-rotation effect on the last image.
rotate_tile : -float ${1=5} -int ${2=8},${3=$2}
  -e "Apply $2x$3 tiled-rotation effect on the last image, with angle $1."
  -v- -i[0] ($2) -*[0] $3 -split_tile $2,$3 -rotate[-@0--1] $1 -append_tile $2,$3 -v+

# Tiled shift.
#-------------
#@gmic shift_tile : 'amplitude=20,M=8,N=M' : Apply MxN tiled-shift effect on the last image.
shift_tile : -float ${1=20} -int ${2=8},${3=8}
  -e "Apply $2x$3 tiled-shift effect on the last image, with amplitude $1."
  -v- -t float $2x$3x1x2 -noise[-1] $1 -r[-1] [-2],[-2],1,2 -warp[-2] [-1],1,1,0 -rm[-1] -v+

#-----------------------------
#
# Deformation filters
#
#-----------------------------

# Spread pixel values.
#---------------------
#@gmic spread : 'dx=3,dy=dx,dz=0' : Spread last image pixel values randomly along x,y and z.
spread : -float ${1=3},${2=$1},${3=0}
  -e "Spread pixel values of the last image with amplitudes ($1,$2,$3))."
  -v- -t float 100%x100%x100%x1x3 -noise[-3] $1,0 -noise[-2] $2,0
  -noise[-1] $3,0 -a[-3--1] v -warp[-2] [-1],1 -rm[-1] -v+

# Water effect.
#--------------
#@gmic water : 'amplitude=30,smoothness=1.5' : Apply water effect on the last image.
water : -float ${1=30},${2=1.5}
  -e "Apply water effect on the last image, with amplitude $1 and smoothness $2."
  -v- -t float 25%x25%x25%x1 -noise[-1] $1 -gradient[-1] xyz -+[-1,-2,-3]
  -blur[-1] $2 -*[-1] 2 -warp[-2] [-1],1 -rm[-1] -v+

# Wave effect.
#-------------
#@gmic wave : 'amplitude=4,frequency=0.4' : Apply wave effect on the last image.
wave : -float ${1=4},${2=0.4}
  -e "Apply wave effect on the last image, with amplitude $1 and frequency $2."
  -v- -t float (1) -r[-1] [-2],[-2],1,1,0,0,1 -distance[-1] 1
  -*[-1] $2 [-1] -cos[-2] -sin[-1] -a[-2,-1] v -*[-1] $1
  -warp[-2] [-1],1 -rm[-1] -v+

# Linear blur.
#-------------
#@gmic blur_linear : 'amplitude=10,vx=1,vy=0' : Apply oriented linear blur on the last image.
_blur_linear :
  --warp[-2] [-1],1,1,1 -*[-2] -1 -warp[-3] [-2],1,1,1 -+[-3,-1] -/[-2] 2 -*[-1] -1
blur_linear : -int ${1=10} -float ${2=1},${3=0}
  -e "Apply linear blur on the last image, with amplitude $1 and orientation ($2,$3)."
  -v- -t float 1x1x1x2 -f[-1] $2,$3 -r[-1] [-2],[-2],1,2 -repeat $1 -_blur_linear -done -rm[-1] -v+

# Radial blur.
#-------------
#@gmic blur_radial : 'amplitude=10,angle=0.5' : Apply radial blur on the last image.
_blur_radial :
  --rotate[-1] @-2,-2,0 -*[-3] -1 -rotate[-2] @-3,-2,0 -*[-3] -1 -+[-2,-1] -/[-1] 2
blur_radial : -int ${1=10} -float ${2=0.5}
  -e "Apply radial blur on the last image, with amplitude $1 and angle $2."
  -v- -t float [-1] -i[-2] ($2) -repeat $1 -_blur_radial -+[-2] $2 -done -v+

# Zoom blur.
#-----------
#@gmic blur_zoom : 'amplitude=5,zoom_step=1.5' : Apply radial blur on the last image.
_blur_zoom :
  --r[-1] @0%x@0%x@0%x100%,2 -r[-1] [-2],0,1,1 -+[-2,-1] -/[-1] 2
blur_zoom : -int ${1=5} -float ${2=1.5}
  -e "Apply zoom blur on the last image, with amplitude $1 and step $2."
  -v- -t float -i[0] ($2) -+[0] 100 -repeat $1 -_blur_zoom -done -rm[0] -v+

# Generic macro for applying a PDE flow.
#---------------------------------------
pde_flow :
  -v- -t float -repeat $2 -if $1 [-1] -endif
  $4 ${5*} ($3) --stats[-2] -r[-1] 1x2x1x1,0 -abs[-1] -stats[-1] -i (@{-1,1}) -rm[-2]
  -+[-1] 0.1 -/[-2,-1] -*[-2] @-1 -rm[-1] -+[-2,-1] -done -v+

# Mean-curvature flow.
#---------------------
#@gmic meancurvature_flow : 'nb_iter=5, time_step=30, seq=0' : Apply iterations of the mean curvature flow on the last image.
_meancurvature_flow :
  [-1]x2 -laplacian -mv[-1] -2 -gradient_2derivative --[-2,-1]
meancurvature_flow : -int ${1=5},${3=0} -float ${2=30}
  -e "Apply $1 iterations of the mean curvature flow, with time step $2."
  -pde_flow $3,$1,$2,-_meancurvature_flow

# Total variation flow.
#---------------------
#@gmic tv_flow : 'nb_iter=5, time_step=20, seq=0' : Apply iterations of the total variation flow on the last image.
_tv_flow :
  [-1]x3 -laplacian -mv[-1] -3 -gradient_2derivative --[-3,-1] -gradient_norm -+[-1] 0.5 -r[-1] [-2] -/[-2,-1]
tv_flow : -int ${1=5},${3=0} -float ${2=20}
  -e "Apply $1 iterations of the total variation flow, with time step $2."
  -pde_flow $3,$1,$2,-_tv_flow

# Hurl noise.
#------------
#@gmic noise_hurl : 'amplitude' : Add hurl noise to the last image.
noise_hurl : -float ${1=10}
  -e "Add hurl noise of amplitude $1% on the last image."
  -v- --stats --f[-2] 0 -noise[-1] 10 -n[-1] @{-2,0,1} -rm[-2] 100%x100% -f[-1] -2
  -noise[-1] $1,2 -threshold[-1] 0 -r[-1] [-2]
  -*[-2] [-1] -*[-1] -1 -+[-1] 1 -*[-3,-1] -+[-2,-1] -v+

# Pixelize.
#----------
#@gmic pixelize : 'sx=30,sy=sx' : Pixelize the last image with specified scales ('sx' and 'sy' in 0..100).
pixelize : -float ${1=20},${2=$1}
  -e "Pixelize last image with scales ($1%,$2%)."
  -v- --dimensions[-1] -r[-2] $1%x$2%x1x3,2 -r[-2] @-1 -rm[-1] -v+

# Deforming filter.
#------------------
#@gmic deform : 'amplitude=10' : Apply random smooth deformation on the last image.
deform : -float ${1=10}
  -e "Apply random smooth deformation on the last image, with amplitude $1."
  -v- -t float 2%x2%x1x2 -noise[-1] $1 -r[-1] [-2],[-2],1,2,5
  -warp[-2] [-1],1,1,1 -rm[-1] -v+

# Puzzle filter.
#---------------
#@gmic puzzle : (no args) : Apply puzzle effect on the last image.
puzzle :
  -e "Apply puzzle effect on the last image."
  -v- -t float [-1] -r[-1] 5%x5%x100%x100%x2 -noise[-1] 0.1 -r[-1] [-2] -rm[-2]
  [-1]x2 -translate[-1] 1,1 --[-2,-1] -norm[-1] -threshold[-1] 0.01 -*[-1] -1
  -+[-1] 1 -r[-1] [-2] -*[-1,-2] 10%x10%x10%x2 -noise[-1] 5,1
  -r[-1] [-2],[-2],1,2,5 -warp[-2] [-1],1,1,1 -rm[-1] -v+

# Fish-eye.
#----------
#@gmic fish_eye : 'amplitude=250' : Apply Fish-eye effect on the last image.
fish_eye : -float ${1=250}
  -e "Apply Fish-eye effect on the last image, with amplitude $1."
  -v- -t float 2x2x1x2 -f[-1] -1,1,-1,1,-1,-1,1,1 -r[-1] [-2],[-2],1,2,3 [-1]
  -norm[-2] -n[-2] 0,1 -cut[-2] 0,0.7 --[-2] 0.7 -*[-2] -$1 -r[-2] [-1]
  -*[-2,-1] -warp[-2] [-1],1,1,1 -rm[-1] -v+

#-----------------------------
#
# Artistic filters
#
#-----------------------------

# Add strip shades along x or y.
#-------------------------------
#@gmic shade_stripes : 'frequency=5, direction=1' : Add horizontal or vertical shaded stripes on the last image.
_shade_stripes0 :
  -v+ -e "Add horizontal shaded stripes on the last image, with frequency $1." -v- 1x100%
_shade_stripes1 :
  -v+ -e "Add vertical shaded stripes on the last image, with frequency $1." -v- 100%
shade_stripes : -float ${1=5} -int ${2=1}
  -v- -t float -n[-1] 0,255 -_shade_stripes$2 $1 -noise[-1] $1,2 -distance[-1] 1
  -r[-1] [-2] -n[-1] 0.3,1.5 -*[-1,-2] -cut[-1] 0,255 -v+

# Add old-movie stripes.
#-----------------------
#@gmic stripesy : 'frequency=10' : Add vertical stripes on the last image.
stripesy : -float ${1=10}
  -e "Add vertical stripes on the last image, with frequency $1."
  -v- -t float -n[-1] 0,255 100% -noise[-1] $1,2 -*[-1] 255 -r[-1] [-2]
  -*[-1] 0.15 -+[-1,-2] -cut[-1] 0,255 -v+

# Tetris effect.
#---------------
#@gmic tetris : 'scale=10' : Apply tetris effect of given size on the last image.
tetris : -float ${1=10}
  -e "Apply tetris effect on the last image, with scale $1."
  -v- -t float [-1] -r[-1] $1%x$1%x$1%x3x2 -n[-1] 0,255 -quantize[-1] 10
  -r[-1] [-2] -rm[-2] -blur[-1] 2 -sharpen[-1] 300,1 -v+

# Damp patch effect.
#-------------------
#@gmic damp_patch : 'opacity=0.7' : Apply damp patch effect on the last image.
damp_patch : -float ${1=0.7}
  -e "Apply damp patch effect on the last image, with opacity $1."
  -v- -t float 100%x100% -f[-1] 1 -translate[-1] 2,2 -translate[-1] -1,-1
  -plasma[-1] 3,0.3 -abs[-1] -blur[-1] 1 -cut[-1] 3%,15% -r[-1] [-2]
  -n[-1] $1,1 -*[-1,-2] -v+

# Light patch effect.
#--------------------
#@gmic light_patch : 'darkness=0.9,lightness=1.7' : Apply light patch effect on the last image.
light_patch : -float ${1=0.9},${2=1.7}
  -e "Apply light patch effect on the last image, with darkness $1 and lightness $2."
  -v- -t float -n[-1] 0,255 2%x2% -noise[-1] 40 -r[-1] [-2],5 -cut[-1] 0,255
  -n[-1] $1,$2 -*[-2,-1] -cut[-1] 0,255 -v+

# Mosaic pattern.
#----------------
#@gmic mosaic : 'density=0.2' : Add mosaic pattern to the last image.
mosaic : -float ${1=0.2}
  -e "Add mosaic pattern on the last image, with density $1."
  -v- -t float 100%x100%x1x1 -noise[-1] $1,2 -distance[-1] 1
  -sharpen[-1] 10000 -*[-1] -1 -blur[-1] 0.5 -n[-1] 0.3,1 -r[-1] [-2] -*[-2,-1] -v+

# Sponge filter.
#---------------
#@gmic sponge : 'size=13' : Apply sponge filter on the last image with specified brush size.
_circle :
  -i 1 -+[-1] 1 -r[-1] $1x$1x1x1x0,0,1 -distance[-1] 1 -n[-1] 0,1 -sqrt[-1] -cut[-1] 0.85,0.86 -*[-1] -1 -n[-1] 0,1
sponge : -int ${1=13}
  -e "Apply sponge filter on the last image, with brush size $1."
  -v- 100%x100%x1x1 -noise[-1] 20,2 -r[-1] [-2] -n[-1] 0,1 -*[-1,-2]
  -_circle $1 -dilate[-2] [-1] -rm[-1] -v+

# Heart filter.
#--------------
#@gmic hearts : (no args) : Apply heart filter on the last image.
_heart9x7 :
  -i 9x7 -f[-1] 0,1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
hearts :
  -e "Apply heart filter on the last image."
  -v- 100%x100%x1 -noise[-1] 10,2 -r[-1] [-2] -n[-1] 0,1 -*[-1,-2] -_heart9x7
  -mirror[-1] y -dilate[-2] [-1] -rm[-1] -v+

# Color ellipses.
#----------------
#@gmic color_ellipses : 'opacity=0.07' : Add random colored ellipses on the last image.
_color_ellipses :
  -i 10 -f[-1] @{-2,0-9} -ellipse[-3] @-1 -rm[-1] -translate[-1] 0,1
color_ellipses : -float ${1=0.07}
  -e "Add random colored ellipses to the last image, with opacity $1."
  -v- --dimensions[-1] -r[-1] 2x2x1x1x0 -mirror[-1] x 1x400 -rand[-1] @{-2,0,1} --rand[-1] @{-2,2,3}
  -rm[-3] 2x[-1] --dimensions[-4] -r[-1] 2x2x1x1x0 -s[-1] y
  -+[-2,-1] -mirror[-1] x -rand[-2] @{-1,0,1} -rm[-1] -/[-1] 10 --rand[-1] -1,1
  1x[-1] -f[-1] $1 3x[-1] -rand[-1] 10,255 -a[-6--1] x -repeat 400 -_color_ellipses -done -rm[-1] -v+

# Whirls texture.
#----------------
#@gmic whirls : (no args) : Add random whirl texture on the last image.
whirls :
  -e "Add random whirl texture to the last image."
  -v- -n[-1] 0,255 -t float [-1] -f[-1] 0 -noise[-1] 0.3,2 -blur[-1] 3
  -gradient[-1] xyz -a[-3--1] v -norm[-1] -sqrt[-1] -blur[-1] 3 -gradient[-1] xyz
  -a[-3--1] v -norm[-1] -sqrt[-1] -blur[-1] 3 -gradient[-1] xyz -a[-3--1] v
  -norm[-1] -sqrt[-1] -blur[-1] 3 -gradient[-1] xyz -a[-3--1] v -norm[-1]
  -sqrt[-1] -n[-1] 0.8,1.5 -r[-1] [-2] -*[-2,-1] -cut[-1] 0,255 -v+

# Add water reflection.
#----------------------
#@gmic reflect : (no args) : Add water reflection effect to the last image.
reflect :
  -e "Add water reflection effect to the last image."
  -v- -t float [-1] -mirror[-1] y -r[-1] 100%x100%x100%x3 -s[-1] v -*[-3] 0.8
  -*[-2] 0.9 -a[-3--1] v -water 30,1.5 1x2 -f[-1] 1,0 -r[-1] [-2]x3 -*[-2,-1]
  -a[-2,-1] y -v+

# B&W Edge filter.
#-----------------
#@gmic edges : 'threshold=30' : Estimate image contours of the last image.
edges : -float ${1=30}
  -e "Estimate last image contours, with threshold $1."
  -v- -t float [-1] -n[-1] 0,255 -gradient_norm -blur[-1] 0.5
  -threshold[-1] $1% -distance[-1] 0 -equalize[-1] 256 -*[-1] -1 -n[-1] 0,255
  -r[-1] [-2] -rm[-2] -v+

# Cartoon effect.
#----------------
#@gmic cartoon : 'threshold=30' : Apply cartoon effect on the last image.
cartoon : -float ${1=30}
  -e "Apply cartoon effect on the last image, with threshold $1."
  -v- -t float [-1]x2 -edges $1 -r[-2] 8x8x1x3,2 -r[-3] 100%x100%x100%x3
  -rgb2lut[-3] [-2] -lut2rgb[-3] [-2] -rm[-2] -blur[-2] 2 -*[-2--1] -n[-1] 0,255 -v+

# Drawing effect.
#----------------
#@gmic drawing : (no args) : Apply drawing effect on the last image.
drawing :
  -e "Apply drawing effect on the last image."
  -v- -t float -smooth[-1] 200,0.2,1,3,3 -blur[-1] 2 -sharpen[-1] 1000 [-1]
  -r[-2] 20x20x1x3,2 -equalize[-2] 256 -rgb2lut[-1] [-2],1 -lut2rgb[-1] [-2] -rm[-2] -v+

# Whirl drawing effect.
#----------------------
#@gmic draw_whirl : (no args) : Apply whirl drawing effect on the last image.
draw_whirl :
  -e "Apply whirl drawing effect on the last image."
  -v- -t float 100%x100% -noise[-1] 70,2 -*[-1] 255 -r[-1] [-2] -and[-1,-2] -smooth[-1] 100,0,1,2,2
  -sqrt[-1] -n[-1] 0,255 -equalize[-1] 256 -v+

# Paper texture.
#---------------
#@gmic paper_texture : (no args) : Add paper texture to the last image.
paper_texture :
  -e "Add paper texture to the last image."
  -v- -t float [-1] 30%x30% -noise[-1] 1,2 -r[-1] [-2],[-2],[-2],1,0 -ifft[-1]
  -rm[-1] -translate[-1] 50%x50%x50%x0x2 -sharpen[-1] 1 -n[-1] 1,1.2 -r[-1] [-2]
  -*[-2,-1] -cut[-1] [-2],[-2] -rm[-2] -v+

# B&W Stencil filter.
#--------------------
#@gmic stencilbw : (no args) : Apply B&W stencil effect on the last image.
stencilbw :
  -e "Apply B&W stencil effect on the last image."
  -v- -r[-1] 100%x100%x1x100% -t float [-1] -edges 30 -quantize[-2] 3 -blur[-2] 10
  -sharpen[-2] 1000000 -norm[-2] -n[-2] 0,1 -*[-1,-2] -n[-1] 0,255 -v+

# B&W Pencil filter.
#-------------------
#@gmic pencilbw : (no args) : Apply B&W pencil effect on the last image.
pencilbw :
  -e "Apply B&W pencil effect on the last image." -v- -r[-1] 100%x100%x1x100%
  -norm[-1] -blur[-1] 0.3 -sharpen[-1] 4000 -smooth[-1] 60,0,1 -equalize[-1] 256
  -sqrt[-1] -n[-1] 0,255 -r[-1] 100%x100%x1x3 -v+

# B&W dithered filter.
#----------------------
#@gmic ditheredbw : (no args) : Create dithered B&W version of the last image.
ditheredbw :
  -e "Create dithered B&W version of the last image." -v- -n[-1] 0,255
  -r[-1] 100%x100%x100%x3 -i 2x1x1x3 -f[-1] 0,255 -rgb2lut[-2] [-1],1
  -lut2rgb[-2] [-1] -rm[-1] -v+

# B&W dots effect.
#-----------------
#@gmic dotsbw : (no args) : Apply B&W dots effect on the last image.
dotsbw :
  -e "Apply B&W dots effect on the last image."
  -v- -t float -norm[-1] --r[-1] 10%x10%x1x1x2 [-1]x4 -threshold[-5] 10%
  -threshold[-4] 30% -threshold[-3] 50% -threshold[-2] 70% -threshold[-1] 90%
  -r[-5--1] [-6],4 -translate[-5--1] -5,-5 -rm[-6] -_circle 3 -dilate[-6] [-1]
  -rm[-1] -_circle 5 -dilate[-5] [-1] -rm[-1] -_circle 7 -dilate[-4] [-1]
  -rm[-1] -_circle 9 -dilate[-3] [-1] -rm[-1] -_circle 11 -dilate[-2] [-1]
  -rm[-1] -or[-5--1] -n[-1] 0,255 -r[-1] 100%x100%x1x3 -v+

# Andy Warhol style.
#-------------------
#@gmic warhol : 'M=3,N=M' : Create a MxN Andy Warhol effect on the last image.
_warhol :
  [-1] 6x1x1x1x3 -f[-3] 0,1,2,3,4,5 -n[-1] 0.2,0 -n[-3] 0,255 -f[-2,-1] 128 -noise[-2,-1] 60,0 -a[-3--1] v
  -cut[-1] 0,255 -ycbcr2rgb[-1] -r[-1] 256x1x1x3,3 -sqr[-1] -n[-1] 0,255 -lut2rgb[-2] [-1] -rm[-1] -mv[-1] -2
warhol : -int ${1=3},${2=$1}
  -e "Create a $1x$2 Andy Warhol effect on the last image."
  -v- -t float -norm[-1] -blur[-1] 2 -quantize[-1] 6 -n[-1] 0,255
  -i[0] ($1) -+[0] $2 -/[0] 2 -pow[0] -1 -*[0] 100 -round[0] 1,-1 -r[-1] @0%x@0%x1x1,2
  -f[0] $1 -*[0] $2 -repeat @0 -_warhol -done -rm[0,-1] -append_tile $1,$2 -v+

# Cubism.
#--------
#@gmic cubism : 'nb_iter=160,bloc_size=30,max_angle=75,opacity=0.7,smoothness=0' : Apply cubism effect on the last image.
_cubism :
   1x1x1x1x2 -rand[-2] 0,@{-3,0} -rand[-1] 0,@{-3,1} -a[-2,-1] x -round[-1] 1 --+[-1] $1 --[-2] $1
   --crop[-4] @-2,@-1,1 -blur[-1] $4 --f[-1] 1 -rm[-3] 1 -rand[-1] -$2,$2 -rotate[-3,-2] @-1,0,0 -rm[-1]
   -image[-5] [-2],@-3,0,$3,[-1] -rm[-3--1]

cubism : -int ${1=160},${2=30} -float ${3=75},${4=0.7},${5=0}
  -e "Apply cubism effect on the last image, with $1 iterations, bloc size $2, maximum angle $3, opacity $4 and smoothness $5."
  -v- --dimensions[-1] -repeat $1 -_cubism $2,$3,$4,$5 -done -rm[-1] -v+

# Soft glow.
#-----------
#@gmic glow : 'amplitude=3' : Apply glow effect on the last image.
glow : -float ${1=3}
  -e "Apply glow effect on the last image, with amplitude $1."
  -v- -t float -r[-1] 100%x100%x1x3 -rgb2ycbcr[-1] -s[-1] v --blur[-3] $1 -n[-1] [-4] -+[-4,-1] -/[-3] 2
  -a[-3--1] v -ycbcr2rgb[-1] -v+

# Old photo filter.
#------------------
#@gmic old_photo : (no args) : Apply old photo effect on the last image.
old_photo :
  -e "Apply old photo effect on the last image."
  -v- -noise 20 -blur 1 -sharpen 30,1 -blur 0.8 -frame_fuzzy 20,20,6,3 -damp_patch 0.7 -n 0,255 -sepia -v+

#-------------------------
#
# Color filters
#
#-------------------------

# Compute luminance.
#-------------------
#@gmic luminance : (no args) : Compute luminance of the last image.
luminance :
  -e "Compute luminance of the last image."
  -v- -n[-1] 0,255 -r[-1] 100%x100%x1x3 -rgb2ycbcr[-1] -channels[-1] 0 -v+

# Apply a 3x3 transformation matrix to RGB vectors.
#---------------------------------------------------
#@gmic mix_rgb : a11,a12,a13,a21,a22,a23,a31,a32,a33 : Apply 3x3 specified matrix to RGB colors.
mix_rgb : -float ${1=1},${2=0},${3=0},${4=0},${5=1},${6=0},${7=0},${8=0},${9=1}
  -e "Apply matrix [ $1 $2 $3 ; $4 $5 $6 ; $7 $8 $9 ] to RGB pixels of the last image."
  -v- -t float -r[-1] 100%x100%x1x3,0,2 -s[-1] v
  --*[-3] $4 --*[-3] $5 -+[-1,-2] --*[-2] $6 -+[-1,-2]
  --*[-4] $7 --*[-4] $8 -+[-1,-2] --*[-3] $9 -+[-1,-2]
  -*[-5] $1 -*[-4] $2 -*[-3] $3 -+[-5--3]
  -a[-3--1] v -v+

# Solarize.
#----------
#@gmic solarize : (no args) : Apply solarization effect on the last image.
solarize :
  -e "Apply solarization effect on the last image."
  -v- -luminance -n[-1] 0,128 -lut2rgb[-1] 1 -v+

# Sepia filter.
#--------------
#@gmic sepia : (no args) : Apply sepia tones filter on the last image.
_sepia :
  -i 6x1x1x3 -f[-1] 0,44,115,143,196,244,0,20,84,119,184,235,0,5,44,73,144,200 -r[-1] 256x1x1x3,3
sepia :
  -e "Apply sepia tones filter on the last image."
  -v- -luminance -_sepia -lut2rgb[-2] [-1] -rm[-1] -v+

# Negative.
#----------
#@gmic negative : (no args) : Compute negative of last image negative.
negative :
  -e "Compute negative of the last image."
  -v- -t float -*[-1] -1 [-1] -stats[-1] -c[-1] 0,0,0,0 -r[-1] [-2] --[-1,-2] -v+

# Select RGB pixels in an image.
#--------------------------------
#@gmic select_rgb : 'R=0,G=0,B=0,tolerance=10' : Select RGB colored pixels in the last image.
select_rgb :
  -e "Select RGB color ($(1=0),$(2=0),$(3=0)) in the last image, with tolerance $(4=30)."
  -v- 1x1x1x3 -f[-1] $1,$2,$3 -r[-1] [-2] --[-2,-1] -norm[-1] -threshold[-1] $4 -negative -v+

# Fill image with RGB color.
#---------------------------
#@gmic fill_rgb : 'R=0,G=0,B=0' : Fill last image with specified RGB color.
fill_rgb :
  -e "Fill last image with RGB color ($(1=0),$(2=$1),$(3=$2))."
  -dimensions[-1] ($1^$2^$3) -r[-1] @-2 -rm[-2]

#-------------------------
#
# Motion related filters
#
#-------------------------

# Cross-correlation and normalized cross-correlation.
#-----------------------------------------------------
#@gmic cross_correlation : (no args) : Compute cross-correlation between the two last images.
cross_correlation :
  -e "Compute cross-correlation between the two last images."
  -v- -t float -norm[-2,-1] -fft[-2] -fft[-1] [-2,-1] -mul[-2] [-5] -mul[-1] [-6]
  --[-2,-1] -*[-5,-3] -*[-3,-2] -+[-3,-2] -ifft[-2,-1] -rm[-1] -v+

#@gmic normalized_cross_correlation : (no args) : Compute normalized cross-correlation between the two last images.
normalized_cross_correlation :
  -e "Compute normalized cross-correlation between the two last images."
  -v- -t float -norm[-2,-1] -fft[-2] -fft[-1] [-2,-1] -mul[-2] [-5] -mul[-1] [-6]
  --[-2,-1] -*[-5,-3] -*[-3,-2] -+[-3,-2] [-2,-1] -a[-2,-1] v -norm[-1]
  -/[-3] [-1] -/[-2,-1] -ifft[-2,-1] -rm[-1] -v+

# Phase correlation.
#-------------------
#@gmic phase_correlation : (no args) : Estimate translation vector between the two last images by the phase correlation method.
phase_correlation :
  -e "Compute phase correlation between the two last images."
  -v- -normalized_cross_correlation -stats[-1] -c[-1] 0,8,0,10 -r[-1] 1,1,1,3,-1 -v+

# Compute a morphing sequence (between the two latest images).
#-------------------------------------------------------------
#@gmic morph : 'N=10,smoothness=0.2' : Compute morphing sequence between the two latest images.
morph : -int ${1=10} -float ${2=0.2}
  -e "Compute morphing sequence with $1 frames and smoothness $2."
  -v- -t float -r[-1] [-2],3 [-2] -displacement[-1] [-2],$2
  -warp[-3] [-1],1,1,1,$1 -*[-1] -1 -warp[-2] [-1],1,1,1,$1 -rm[-1]
  -a[-$1--1] z -reverse -a[-$1--1] z
  1x1x2 -f[-1] 0,1 -r[-1] [-2],3 -*[-2] [-1] -*[-1] -1 -+[-1] 1 -*[-3,-1]
  -+[-2,-1] -s[-1] z -reverse[-$1--1] -v+

# Register two latest images with a rigid or non-rigid warp.
#------------------------------------------------------------
#@gmic register : 'method=0' : Register last image with the penultimate image ('method' can be '{0=translation, 1=non-rigid warp}').
_register1 :
  -e "Align last and penultimate images with non-rigid warp."
  -v- -t float -r[-1] [-2],3 [-1] -displacement[-1] [-3],1.2 -warp[-2] [-1],1 -rm[-1] -v+
_register0 :
  -e "Align last and penultimate images with translation."
  -v- -t float -r[-1] [-2],3 [-2,-1] -blur[-2,-1] 2 -equalize[-2,-1] 256 -phase_correlation -r[-1] [-2],[-2]
  -warp[-2] [-1],1,1,2,1 -rm[-1] -v+
register : -int ${1=1}
  -if $1 -_register1 -else -_register0 -endif

#-------------------------
#
# Video related filters
#
#-------------------------

# Deinterlace frame.
#-------------------
#@gmic deinterlace : 'method=0' : Deinterlace last image by a simple algorithm ('method' can be 0=simple or 1=motion-compensated).
_deinterlace0 :
  -e "Deinterlace last image with simple method."
  -v- -t float -k[-1] [-1] -s[-1] y -a[1--1:2] y -a[2--1] y -r[-1,-2] [-3]x5 -+[-1,-2]
  -/[-1] 2 -rm[-2] -v+
_deinterlace1 :
  -e "Deinterlace last image with motion-compensated method."
  -v- -t float -k[-1] -s[-1] y -a[0--1:2] y -a[1--1] y -r[-2] [-1],0
  -r[-1,-2] 100%x200%x1x100%x5 [-2] -displacement[-1] [-2]x0.01
  -warp[-3] [-1],1,1,1,2 -*[-1] -1 -warp[-2] [-1],1,1,1,2 -rm[-1] -k[-2,-4] -+[-1,-2]
  -/[-1] 2 -v+
deinterlace :
  -_deinterlace${1=0]

# Predator effect. (first image must be the reference background, second image is the one to process).
#---------------------------------------------------------------------------------------------------
#@gmic predator : (no args) : Apply predator effect on the last image using background as the penultimate image.
predator :
  -e "Apply predator effect on the last image."
  -v- -t float -equalize[-2--1] 256 --[-1] [-2] -sqr[-1] -cut[-1] 20%,100%
  -blur[-1] 1 -n[-1] 0,30 -channels[-1] 0,1 -warp[-2] [-1],1,1 -rm[-1] -v+

#-------------------------
#
# Other various filters
#
#-------------------------

# Horizontal fading.
#-------------------
#@gmic fade_x : 'start=30,end=70' : Create an horizontal fading transition between the two last images ('start' and 'end' in [0..100]).
_fade : -float ${1=30},${2=70}
  -t float -r[-2] [-3],5 -r[-1] [-2],3 -cut[-1] $1%,$2% -n[-1] 0,1 --*[-1] -1 -+[-1] 1 -*[-4,-1] -*[-2,-1] -+[-2,-1]
fade_x :
 -e "Create ($1%,$2%) horizontal fading transition between the two last images."
 -v- 2 -f[-1] 0,1 -_fade $1,$2 -v+

# Vertical fading.
#-----------------
#@gmic fade_y : 'start=30,end=70' : Create a vertical fading transition between the two last images ('start' and 'end' in [0..100]).
fade_y : -float ${1=30},${2=70}
  -e "Create ($1%,$2%) vertical fading transition between the two last images."
  -v- 1x2 -f[-1] 0,1 -_fade $1,$2 -v+

# Radial fading.
#---------------
#@gmic fade_radial : 'start=30,end=70' : Create radial fading transition between the two last images ('start' and 'end' in [0..100]).
fade_radial : -float ${1=30},${2=70}
  -e "Create ($1%,$2%) radial fading transition between the two last images."
  -v- 100%x100% -point 50%,50%,0,1,1 -distance[-1] 1 -_fade $1,$2 -v+

# Diamond fading.
#----------------
#@gmic fade_diamond : 'start=70,end=90' : Create diamond-shaped fading transition between the two last images ('start' and 'end' in [0..100]).
fade_diamond : -float ${1=70},${2=90}
  -e "Create ($1%,$2%) diamond-shaped fading transition between the two last images."
  -v- 3x3 -f[-1] 0,1,0,1,1,1,0,1,0 -_fade $1,$2 -v+

# Image composition : try to generate an image containing all details of an image list.
# Usage : gmic image1.jpg -compose_add image2.jpg -compose_add ... imageN.jpg  -compose_add -compose
#----------------------------------------------------------------------------------------------------
#@gmic compose_add : (no args) : Generate composition image from the last image (to be used with '-compose').
compose_add :
  -e "Generate composition image."
  -v- [-1] -gradient_norm -blur[-1] 2 -n[-1] 1,10 -sqr[-1] -s[-2] v -*[-4] [-1]
  -*[-3] [-1] -*[-2] [-1] -a[-4--1] v -v+

#@gmic compose : (no args) : Compose images of the list togethers.
compose :
  -e "Compose all images of the list togethers."
  -v- -r [0],[0],1,4,0 -r [-1],3 -+ -s[-1] v -/[-4] [-1] -/[-3] [-1] -/[-2] [-1]
  -rm[-1] -a v -v+

# Multiply composition.
#----------------------
#@gmic compose_multiply : (no args) : Compose the penultimate image with the last one, using multiply composition.
compose_multiply :
  -e "Compose the penultimate image with the last one, using multiply composition."
  -v- -t float -r[-1] 100%x100%x1x[-2] -r[-1] [-2],3 -/[-1] 255 -*[-2,-1] -v+

# Screen composition.
#---------------------
#@gmic compose_screen : (no args) : Compose the penultimate image with the last one, using screen composition.
compose_screen :
  -e "Compose the penultimate image with the last one, using screen composition."
  -v- -t float -r[-1] 100%x100%x1x[-2] -r[-1] [-2],3 -/[-1] 255
  -*[-1] 1 -+[-1] 1 -*[-2] -1 -+[-2] 255 -*[-2,-1] -*[-1] -1 -+[-1] 255 -v+

# Overlay composition.
#---------------------
#@gmic compose_overlay : (no args) : Compose the penultimate image with the last one, using overlay composition.
compose_overlay :
  -e "Compose the penultimate image with the last one, using overlay composition."
  -v- -t float -r[-1] 100%x100%x1x[-2] -r[-1] [-2],3 -/[-1] 255
  --threshold[-1] 0.5 --*[-3] 4 -+[-1] 510 -*[-1] [-3] --[-1] 255
  -*[-4] 2 -+[-1] [-4] -*[-4,-3] -*[-3,-2] -+[-2,-1] -v+

# Print the factorial of an integer.
#-----------------------------------
#@gmic factorial : 'N' : Print the factorial of the integer 'N'.
factorial : -int $1
  -v- ($1) -+[-1] 1 -if @-1 (1) (1) -repeat $1 -*[-1] @-2 -+[-2] 1 -done -v+ -e "Factorial($1) = @-1" -v- -rm[-3--1]
  -else -echo "Factorial($1) is undefined." -q -endif -v+

# This is a sucking easter-egg ! (R-Rated).
#------------------------------------------
dick3d :
  -e ""
  -e "!!********************************************************!!"
  -e "!! Congratulations ! You have found the hidden Easter-egg !!"
  -e "!!********************************************************!!"
  -e ""
  -v- -rm -t float 2 1x2 1x1x2 -f -1,1 -r 100x100x100x1x3 -sqr -+ -* -8 -exp
  [0]x2 -translate[-1] 20 -translate[-2] -20 -+[-1,-2] -translate[-1] 0,-20
  -r[-2] 100x220x100x1x3 -r[-2] 100x100x100x3,0,0,1 -translate[-2] 0,10 -+
  -isovalue3d 0.5 -rd3d 4 -d3d -v+

# Create 3D centered unit mapped cube from an image.
#---------------------------------------------------
#@gmic imagecube3d : 'resolution' : Create a 3D mapped cube from the last image.
imagecube3d : -int ${1=128}
  -e "Create 3D mapped cube of size $1x$1x$1 from last image."
  -v- -r[-1] $1,$1,1,-100,2 -mirror[-1] x -elevation3d[-1] 0 -c3d[-1] -n3d[-1] -+3d[-1] 0,0,0.5 --rot3d[-1] 0,1,0,180
  -+3d[-2,-1] --rot3d[-1] 0,1,0,90 --rot3d[-2] 1,0,0,90 -+3d[-3--1] -v+

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC macro file)
